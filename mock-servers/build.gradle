
plugins {
    id 'groovy'
}

ext {
    API_MOCK_SERVER_RELATIVE_PATH = 'mock-api'
}

// Should be extracted into the buildSrc, but it fails on Bamboo. Sad Face.
class ExecWait extends DefaultTask {
    String command
    String ready
    String directory

    @TaskAction
    def spawnProcess() {

        ProcessBuilder builder = new ProcessBuilder(command.split(' '))
        builder.redirectErrorStream(true)
        builder.directory(new File(directory))
        Process process = builder.start()

        InputStream stdout = process.getInputStream()
        BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

        def line
        while ((line = reader.readLine()) != null) {
            println line
            if (line.contains(ready)) {
                println "$command is ready"
                break;
            }
        }
    }
}

task installApiMockServerLibs(type: Exec) {
    workingDir "${API_MOCK_SERVER_RELATIVE_PATH}"
    executable 'npm'
    args 'install'
}

task startApiMockServer(type: ExecWait) {
    dependsOn installApiMockServerLibs

    directory file("${API_MOCK_SERVER_RELATIVE_PATH}").absolutePath
    command 'npm start'
    ready 'Listening on'
}

task startMockServers {
    dependsOn startApiMockServer
}

task stopMockServers {
    doFirst {
        def ports = [3000]

        println("Stopping mock server, assuming they are running on port ${ports.join(', ')}")

        ports.each { port ->
            println('Detected not Windows, using UNIX command')

            def cmd = "lsof -Fp -i :$port"
            println("Checking processes using relevant ports with command: ${cmd}")
            def process = cmd.execute()

            process.in.eachLine { line ->
                def killProcessCommand = "kill -9 ${line.substring(1)}"
                println("Killing processes using command: ${killProcessCommand}")
                def killProcess = killProcessCommand.execute()
                killProcess.waitFor()
            }
        }
    }
    println("Processes stopped")
}
